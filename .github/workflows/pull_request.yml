name: 'TF validate & builds'
on:
  pull_request:
  push:
permissions:
  contents: read
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: "Terraform:\n  - 'terraform/**'     \n"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        working-directory: terraform
        run: |
          ls -d */ | while read d
          do
          echo "Running tf init in directory: $d"
          cd $d && terraform init && cd ..
          done
      - name: Terraform Format
        working-directory: terraform
        run: |
          ls -d */ | while read d
          do
          echo "Running tf format check in directory: $d"
          cd $d && terraform fmt -check && cd ..
          done
      - name: Terraform Validate
        working-directory: terraform
        run: |
          ls -d */ | while read d
          do
          echo "Running tf validate in directory: $d"
          cd $d && terraform validate && cd ..
          done
  java-builds:
    name: 'Java pipelines build'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: "Pipelines:\n  - 'pipelines/**'     \n"
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # v4.2.2
        with:
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
      - name: Build with Gradle Wrapper
        working-directory: pipelines
        run: |-
          for pipeline_dir in */
          do
            echo "Checking pipelines/$pipeline_dir"
            if [ -f "$pipeline_dir/gradlew" ]
            then
              echo Gradle build found
              cd $pipeline_dir
              ./gradlew build
              cd ..
            else
              echo Ignoring, no gradlew found
            fi
          done
